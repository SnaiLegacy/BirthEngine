package core {		import debug.printf;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.net.URLRequest;		public class ResourceLoader extends Sprite	{		/**		 * Array containing the loaded files.		 */		public var objectsArray:Array = new Array();				/**		 * The percentage loaded out of the entire load operation.		 */		public var pLoaded:int = 0;					/**		 * Array containing the items to be loaded.		 */ 		private var itemsArray:Array = new Array();					/**		 * Int representing the total number of items that need to be loaded.		 */ 		private var totalItems:int;						/**		 * Int representing the currently indexed loader item.		 */ 		private var currItem:int = 1;				/**		 * Creates a new ResourceLoader object with the 		 * @param	_itemsArray		 */		public function ResourceLoader(_itemsArray:Array)		{			objectsArray	= [];			itemsArray	= [];			pLoaded		= 0;			itemsArray 	= [];			totalItems 	= 0;			currItem 	= 1;			itemsArray = _itemsArray;			totalItems = _itemsArray.length;			loadOne(currItem - 1, itemsArray);		}				private function loadOne(what:int, _itemsArray:Array):void		{			var ldr:Loader = new Loader();			ldr.load(new URLRequest(_itemsArray[what].toString()));			ldr.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onInternalProgress);			ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, onInternalComplete);		}			private function onInternalProgress(e:Event):void		{			var temp:int = Math.ceil((((e.target.bytesLoaded / e.target.bytesTotal)*100 * currItem) / totalItems));			if (temp > pLoaded) {				pLoaded = temp;		// avoid the precentage to drop			}			//trace(pLoaded);			dispatchEvent(new Event("preloadProgress")); // call the parent class with a progress update		}				private function onInternalComplete(e:Event):void		{			objectsArray.push(e.target.content);	// add a loaded object to the objects array			currItem += 1;							// increment the current item to be loaded			if (objectsArray.length == totalItems) {				e.target.removeEventListener(ProgressEvent.PROGRESS, onInternalProgress);	// garbage collect				e.target.removeEventListener(Event.COMPLETE, onInternalComplete);				dispatchEvent(new Event("preloadComplete"));	// when all objects are loaded, call the parent class			} else {				loadOne(currItem - 1, itemsArray);	// load the next one			}			printf("Resources successfully loaded.");		}				public function get percLoaded():int		{			return pLoaded;			// returns the loaded percentage of all files to be preloaded		}				public function get objects():Array		{			return objectsArray;	// returns the loaded files as an array		}			}	}